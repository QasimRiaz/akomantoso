#summary Release Notes Akoma Ntoso 1.0

_Release 9 December 2009_

_Technical Supervision: Fabio Vitali_

_Legal Domain Supervision: Monica Palmirani_

_University of Bologna_


<wiki:toc max_depth="10" />


= 1Introduction =

This document introduces and explains the schema for AKOMA NTOSO 1.0, an XML-based document format for legislative documents in African countries. More details about the background and rationale of this project and of the design methodology can be found in the AKOMA NTOSO web site, www.akomantoso.org.

In this document we provide technical details and assumptions about the AKOMA NTOSO 1.0 document structure and elements, as well as some hints for document markup using this schema. The final document describes two different but connected families of schema. The first is the AKOMA NTOSO general schema, a vocabulary and a minimal set of constraints that all AKOMA NTOSO documents must comply to. A set of stricter schemas, the AKOMA NTOSO custom schemas, provide more constraints over the same vocabulary of elements to enforce the rules of specific document types in specific African countries. It is a requirement of AKOMA NTOSO that all documents satisfying one of the custom schemas also satisfy the general schema.

In this release only the general schema is described in full. Thus, except when explicitly mentioned, all rules are expected to refer to the general schema (and thus to *all* AKOMA NTOSO documents).

= 2Namespaces =

AKOMA NTOSO 1.0 documents are completely qualified, i.e., namespaces are used throughout its structures. Even though some elements use the same name as HTML elements, and in fact are directly drawn out of the HTML vocabulary, out of simplicity only one namespace is used, so that all elements are similarly qualified. The net result is that it is possible to specify the AKOMA NTOSO namespace as the default namespace and have no prefixes in the instance document, while maintaining full qualification of the documents.

The namespace for this release is “http://www.akomantoso.org/1.0”.

= 3Global overview of the schema =

All AKOMA NTOSO documents share the same root element <akomantoso>, under which the specific document type is selected. The single root element follows a specific design approach called “Universal root”, which is aimed at better identifying of the root and separation of namespace and schema declaration (available in the root) and meaningful attributes (available in the document type element).

The schema starts with a few <group>s and <attributeGroup>s used throughout the schema for content models and types. They are followed by common <simpleType>s (mostly enumerations of string values) and <complexType>s. Complex types in this sections include those supporting all but one of the main categories of content models used throughout this schema, such as hierarchy (a hierarchy of nested elements with number and titles), blocks (a sequence of block elements - e.g., paragraphs) used within containers either with required or optional identifiers, inline (the content model for all mixed model elements such as paragraphs), and marker (zero length elements characterized by their attributes) either with required or optional identifiers. The last category of content models, container, has no common form, but lists different elements in different orders, and individual container-like complex types are spread throughout the schema.

Elements are organized in meaningful sections:

  # The root element <akomantoso>
  # The document elements, one for each document type (such as <act>, <bill>, <judgement>, <report> <debateRecord> and <doc>), that share one of the main document formats: hierarchicalStructure (that has an explicit hierarchy inside), openStructure, that allows basically everything inside, judgementStructure, a flat organization of section that contain and organize the judgement, and debateStructure, a slightly hierarchical structure for debaterecord and reports.
  # The shared container elements, one for each main part of the abovementioned structures, except for <meta>, which is described in the apposite section.
  # The hierarchical elements, listing the main elements that are used in the full hierarchy of nested structures of acts and bills, as well as <heading>s, <num>s and <subtitle>s.
  # Elements for parliamentary debates, particularly subdivisions (such as <communication>s, <papers>, <questions> or <address>es, and specific debate elements such as <speech>, <question>, etc.
  # Elements for judgements, particularly <background>, <motivation>, <decision>, and for open structures, particularly <item>.
  # AKOMA NTOSO specific block and inline elements, including the table of content (<toc> and <tocItem>), the specific elements appearing in the <preamble>s of the various document types, the normative references (<ref>, <mref>, <rref>), the defined term in a definition (<def>) the note marker (<noteref>) pointing to an editorial note placed out of line (in the meta section), the recorded time of a spoken remark (<recordedTime>), the container for amendments (<mod>, <mmod>, <rmod>) and of two types of amendment quoted fragments: simple text fragments (such as a few words inside quotes) or full structures (such as an entire part or a section).
  # Generic elements: the list of available generic elements (one for each of the main categories of content models).
  # HTML elements: the list of elements, directly derived from HTML, used to provide for presentation-oriented, rather than semantic-oriented, markup within AKOMA NTOSO documents. They are in effect a very strong simplification of the full HTML language, but still allow for many useful structures inside legal documents (such as tables).
  # Metadata elements within the <meta> element provide a location for all relevant information about a AKOMA NTOSO document that _does not belong to its actual content_. Metadata thus are all, by definition, editorial additions to the text as originally composing the document.

= 4Patterns =

Patterns are the abstraction and distillation of past experiences in designing and resolving design problems. They are general and widely applicable guidelines for approaching and justifying design issues that often occur in XML-based projects.

In AKOMA NTOSO patterns are used to create categories of content models (and thus correspond to only those content models that have been found to be actually useful) and more generally in schema design (and thus correspond to guidelines on how to make the schema more modular, flexible and understandable by users). Both approaches are well known and well established in the literature, although by different experts in different ways.

== 4.1Categories in content model ==

Categories of content models is the term used within AKOMA NTOSO to refer to families of elements that share the same conceptual organization of the internals. The AKOMA NTOSO 1.0 Schema uses systematically five categories of content models. This means that all content models and complex types used in the schema follow precisely the form of the relevant category, and all elements can be simply described and treated according to their category rather than individually.

These categories are:

  * The _markers_: markers are content-less elements that are placed here and there in the document and are meaningful for their position, their names and their attributes. Markers are also known as _empty elements_ or _milestones_. There are two main families of markers in the AKOMA NTOSO schema: _placeholders_ in the text content (e.g., note references) that can appear in any position that also has text, and _metadata_ elements that only appear in some subsection of the <meta> section. IN AKOMA NTOSO, all metadata elements are markers, so that metadata values are not part of the text content of a document, but rather become attribute values.
  * The _inlines_: an inline element is an element placed within a mixed model element to identify a text fragment as relevant for some reason. There are both semantically relevant inlines and presentation oriented inlines. There is but one content model using inlines (and markers), which means that all mixed model elements (i.e., those that allow both text and elements) also allow a repeatable selection of all inline elements. For a discussion of why this is only a trade-off decision, and not the ideal solution, see the discussion at the end of this section.
  * The _blocks_: a block is a container of text or inlines and placeholders that is organized vertically on the display (i.e., has paragraph breaks). Most blocks in AKOMA NTOSO are based on the HTML language. There is only one content model that uses blocks, and it allows a repeatable selection of all available blocks. This means that wherever any block is allowed, all blocks are allowed too: e.g., wherever a paragraph is allowed, a table or a list is also allowed.
  * The _containers_: containers are sequences of specific elements, some of which can be optional. Containers are all different from each other (since the actual list of contained elements vary), and so there is no single container content model, but rather a number of content models that share the same conceptual category. The shared characteristic of containers, is that no text is allowed directly inside them, but only a collection of other elements. Text therefore can only be placed within a block within the container.
  * The _hierarchy_: a hierarchy is a set of sections nested to an arbitrary depth, all provided with title and numbering. Each level of the nesting can contain either more nested sections or a container. No text is allowed directly inside the hierarchy, but only within a block element that is contained within a container element (not considering, of course, titles and numbering). AKOMA NTOSO 1.0 uses only one hierarchy, with predefined names and no constraints on their order or systematic layering.

There are three exceptions to the systematic use of patterns:

  * The <li> element allows both inlines and other nested lists (<ul> and <ol>). The pattern would require <li> elements to contain only text, and nested lists to be direct child of the main list (<ul>s within <ul>). Since this goes against universal HTML practice, we have decided against full pattern adherence and in favor of HTML tradition.
  * The <mod> element allows quoted text and structures within its content. No problems for quoted texts, but when an amendment clause specifies in full a new structure (such as a section) within the main flow, the full content of the new structure needs to be described, and it is thus possible to have a section within a paragraph within a clause, which is against the inline pattern. There is no simple way out of this issue.
  * There is some inline elements that only make sense in the preface and/or preamble of the document: for instance are <DocTitle>, <DocNumber>, for numbered documents such as acts or bills, or <party>, <judge> for judgements. They are in fact part of the _*one*_ inline content model and thus are available everywhere in the document. There is no simple way to define blocks within <preamble> and <preface> to allow these elements and blocks elsewhere to reject them, so it has been decided that it is better to allow them everywhere rather than uselessly complicating the schema.

== 4.2Patterns in schema design ==

Design patterns are distillation of common wisdom in organizing the parts and the constraints of a schema. Some of them are listed in http://www.xmlpatterns.com/. Whenever there has been a design choice to be made that was not immediately obvious and naturally acceptable, a relevant pattern has been sought and properly used. In fact, http://www.xmlpatterns.com/ also contain immediately obvious and naturally acceptable pattern that have been used in AKOMA NTOSO, but only the not-so-obvious and not-so-natural ones have been explicitly mentioned and referred to. You can find the relevant mentions in comments within the schema itself, and in the documentation.

= 5Metadata elements =

The meta section contains all the meta-information that needs or can be added to the actual content of the document. As a rule, all editorial content (i.e. content added by the editorial process out of drafting rooms) need to be placed in the meta section, except for markup and note references. Vice versa, all actual content of the document need to have a place outside of the meta section and within the appropriate content sections.

Elements within the <meta> section are divided in several subsections, such as <identification> (to provide for names and identifiers to clearly specify and identify the various aspects of the document as characterized by the FRBR model), <publication> (details about the publication of the paper-based document), <lifecycle> (information about the events the document has undergone) or <references> (a list of entities, individuals, concepts and other documents this document is related to for any reason, such as the topics the document is about, the people mentioned, or the documents it amends or it is amended by). An additional section, <proprietary>, allows additional metadata elements to be added by local implementations without the need for all other implementations to know about them and know how to react to them.

= 6Amendments, versions and document lifecycle =

AKOMA NTOSO 1.0 include a sophisticated mechanism to keep track of the life cycle and evolution of a legal document. This is particularly useful for acts that are amended and modified in time, while maintaining their fundamental nature.

The management of evolution of a document makes two important assumptions:

  * Amendments and events in the life cycle of a document (including original approval, final repeal and any other event affecting its presence in the law system or its content) happen in precise moments in time that can be determined objectively (albeit possibly with difficulty) and attributed a specific date.
  * Amendments and events in the life cycle are due to the enactment of a specific, individual document that can be objectively traced back and identified with an URI. If two different documents affect the same act on the same date, then these must be counted as two different and separate events on the amended act.

Handling events in AKOMA NTOSO centers around the <lifecycle> element in the meta section. This contains two containers, <events> and <references>, used to list the dates of all the events affecting a document, and the references to the URIs of all the documents generating these events. Each reference is provided with a required identifier, which is used by the event list to specify which document is responsible for which events. These elements must appear in all documents that have undergone two or more events (e.g., all acts except the ones that still have no amendments).

Documents in AKOMA NTOSO are organized in three main categories, as specified in the contain attribute of the document type element:

  * originalVersion: this value reflects the fact that the content on the document is exactly the content that has been formally and explicitly approved by the relevant authority, with no amendments applied.
  * singleVersion: this value reflects the fact that the content of the document is an editorially modified version of the original document, according to one or more subsequent amendment documents. These amendment documents and the enactment dates of the amendments *must* be all mentioned in the <lifecycle> element. Individual additions and deletions are not marked in the content.
  * multipleVersions: this value reflects the fact that the content of the document is the juxtaposition of fragments belonging to two or more different versions of the same document, each fragment marked as belonging to one or many of these versions. Thus in a multipleVersions act there could be two or more copies of section 2, each associated to the date it started enactment and ended enactment.

The <lifecycle> element is a required element for all singleVersion and multipleVersion documents, and must be complete up to the enactment date of the latest document referenced in the <lifecycle> element (i.e., there can potentially exist subsequent amendments not included, but all amendments preceding the document’s date must be correctly listed and referenced, even if they play no part in the displayed content). OriginalVersion documents need not have the <lifecycle> element, but surely can have it if the editors decide so.

In case a multipleVersions document is being generated, each element and text fragment may be associated with an enactment specification through the means of the five attributes: start, end (for validity), startEfficacy, endEfficacy (for efficacy) and status. Each fragment (a whole element if appropriate, otherwise a newly inserted <span> or <inline> element for text fragments for which no exact containing element exists) must use these attribute to specify its nature.

The start and end attributes (and similarly the startEfficacy and endEfficacy attributes) contain a reference to the ID of the event that has marked the beginning or the end of the enactment (or of the efficacy) of the fragment. A start attribute with no end attribute marks a fragment that has appeared in an amendment and still exists in the latest recorded version of the document. An end attribute with no start attribute mark a fragment that was part of the original document but has been repealed before or at the latest recorded version of the document. The status attribute records the type of amendment of the fragment. The value “omissis” can only be used by non-authoritative publications that need to display only part of the whole document: when status=”omissis”, the structure must be complete as if all contents was present, but unrequired parts of the actual content can be removed. Similarly, the value “editorial” can be used to add fragments of text of editorial nature (i.e., that are generated by editors rather than authors). Examples include annotations and translated sentences. For instance:

<p xml:lang=”afr” id=”blk123”>Partye wat deel wil vorm van die proses van regering, is vol verligting. ``Sien,'' sˆ die Nuwe NP, ``die ANC is nie magshonger nie!'' Ryke ironie, komende van waar die Nuwe NP sit. <span xml:lang=”eng” status=”editorial”>(Translation of Afrikaans paragraph follows.)</span></p>

<p xml:lang=”eng” status=”editorial” refersTo=”blk123”>[Parties who want to form part of government are quite relieved. ``You see'', says the New NP, ``the ANC is not power-hungry!'' Such irony, if one considers where the New NP is sitting.]</p>

= 7References =

Documents make references to external entities that need to be identified with clarity and no ambiguity. The current release of Akoma Ntoso includes a section where references to external concepts, people and places are specified. These include references to other Akoma Ntoso documents, to other non-Akoma Ntoso documents that are accessible through the net, or to individual instances of classes specified in a local ontology.

== 7.1The structure of references ==

All references to external concepts share the same structure, in that they are empty elements in the references section provided with exactly four attributes:

  * href: the URI describing the entity being referred to. This can be a whole document (for instance, the act containing amendments to the current document), or a fragment of a document (for instance, the identifier of the unique record identifying precisely the person being referred to in the document).
  * id: this is the string that identifies within the document the entity being described. All internal references will thus use this id. For instance, every event in the document lifecycle has a source attribute containing a reference to the id of the document affecting or being affected by the document.
  * showAs: this is the string that can and must be used in displaying information about this entity. For instance, this attribute contains the name of the speaker as it must be displayed.
  * shortForm: this optional attribute contains a secondary form of the display information of the entity. For instance, in some reports it is necessary to provide the full name of a person at the first utterance, and only the name in any further utterance from the same person.

== 7.2Referring to precise concepts in the document ==

AKOMA NTOSO provides a series of mechanisms for referring to precise concepts in the documents being marked up. Regardless of whether the textual content of the document is sufficiently explicit and unambiguous, the marker of the document may and should provide additional disambiguating information about individual pieces of fragment denoting precise concepts through the aid of the appropriate attributes.

This disambiguation happens systematically as a two-step process: first of all, a mention to the ontological concept is added to the references section and provided with an id, and then one or more attributes in the document elements are used to refer to it.

For instance, every individual in a debate is associated via the id to an element TLCPerson in the references section: the by attribute of the speech element indicates the speaker (this must be a TLCperson), the as attribute specifies the role of the speaker (which must ne a, if any (and it must be a TLCrole) and the to attribute indicates the addressee (this can either be a person or a role).

The following are the attributes used for this purpose:

  * refersTo: points to any instance of a Top Level Class of the ontology. It is used to notify the reader in a generic way to what specific concept is the element referring to.
  * href: contains the URI of a instance of an FRBR document class or of a web page. Furthermore, it signals the application that the reference must be considered navigable, i.e., activatable by the user (e.g. via a link).
  * upTo: for range references (e.g., rref and rmod) this specifies the URI of the last, or highest, element of the range being referred to.
  * by: points to a person, i.e., an instance of the class TLCPerson in the references section, relative to the person by which the content has been provided.
  * as: points to a role, i.e., an instance of the class TLCRole in the references, relative to the role held by the person when uttering the content.
  * to: points either to a role, a person or an organization, relative to the kind of addressee of the content being provided.

Thus, any fragment in the text content of the document referring to Events, Concepts, or other instances of the Top Level Classes need to use the refersTo attribute to point to the id of the corresponding element in the references section.

A few elements can be considered of some use:

  * The element entity provides a standard mechanism to refer to mentions of instances of Top Level Classes in the content of the document. Any instance of any class can be referred to via an instance element.
  * ref, mref, and rref provide a mechanism to refer to other documents in the Akoma Ntoso domain. These elements may use the refersTo attribute, but will most frequently directly use the href attribute to specify a navigable reference to the document they refer to. The element ref specifies a single reference, the element mref a group of references (a list of individual ref elements must be placed inside the mref element, one for each reference) and the rref element specifies a range of references delimited by the href and upTo attributes.
  * mod, mmod and rmod provide a mechanism to specify modifications to other documents. The mod element contains at least one ref element identifying the destination of the modification, and may contain as many quotedStructure and quotedText elements as needed providing the textual modification (if any) in terms of either whole structures or individual words. The element mod specifies a single modification, the element mmod a group of modifications (a list of individual mod elements must be placed inside the mmod element, one for each modification) and the rmod element specifies a range of modifications delimited by the href and upTo attributes.
  * The a element provides a mechanism to refer to web pages, e.g., the official home page of an organization. It should never be used for references to AKOMA NTOSO documents (that are only referred to via *ref elements).

The following inline elements may appear to be references, but are rather definitions:

  * date: specifies that the content of the element is a date. Through the date attribute it is possible to provide the unambiguous form of the date in XSD 1.0 syntax (yyyy-mm-dd).
  * docDate, docType, docNumber, docProponent, docPurpose: specify that the content of the element provide information about a date, a type, a number, a proponent and a purpose of the document, respectively. The attribute refersTo may point to appropriate instances of the Top Level Classes accordingly. Attributes refersTo are required if there are more than ONE such element per type (e.g., a document may have TWO different docNumber or docDate elements, but they must be disambiguated via refersTo elements pointing to different instances of the TLCConcept class).
  * judge, party, lawyer specify the judge, party and lawyer associated to a judgement. These elements need to be used when the document introduces these individuals or organizations in a formal way. Any further reference to them should be done via the entity element.

== 7.3Identifiers ==

Identifiers are systematically used in AKOMA NTOSO. All AKOMA NTOSO elements allow an identifier. Most relevant elements and sections _require_ it. Identifiers are the main way to identify fragments and parts of the document in an unambiguous form. They can be used in document references (e.g. links and amendment commands) as a precise pointer to the actual part of the document mentioned (as opposed to simply referring to a document as a whole). Even internal links need to use identifiers.

The schema does not explicitly provide a syntax for identifiers, which is described here in human readable format. Identifiers are composed by juxtaposing subidentifiers of the path needed to access them. Legal documents provide explicit global numbering for sections and articles, and local numbering for hierarchical subparts of them. For instance, all parts in different structures are numbered starting each time from 1, so “part 1” is not sufficient to clearly identify the actual part, while base structures (such as <article>s or <section>s have global numbering, so that for instance “article 12” clearly points to a single and well-specified element.

Each sub-identifier is composed of three letters, plus a string or a number identifying its position within the overall list of similarly named elements. Blocks are all named “blkX”, regardless of their actual names, and inlines are all named “inlX”, regardless of their actual names. An exception to this are references “refX” and amendments “modX”.

The following is a table with some examples of identifiers:

|| *Element* || *Identifier* || *Example* || *Identifier of example* ||
|| <book> || secXX || Book 2 of this act || Bck2 ||
|| <part> || prtXX || Part 1 of book 2 of this act || bck2-prt1 ||
|| <paragraph> || parXX || Paragraph 3 of part 1 of book 2 of this act || bck2-prt1-par3 ||
|| <chapter> || chpXX || Chapter 5 of paragraph 3 of part 1 of book 2 of this act || bck2-prt1-par3-chp5 ||
|| <article> || artXX || Article 12 || art12 ||
|| <clause> || claXX || Clause 3 of article 12 || art12-cla3 ||
|| <li> || itmXX || item “c” of clause 3 of article 12 || art12-cla3-itm3 ||
|| <p> || blkXX || Third paragraph of clause 3 of article 12 || art12-cla3-blk3 ||

Identifiers *never change* even if and when the elements get officially renumbered. Insertions may add a character at the end of the identifier. So if an amendment creates an article “12/a” or “12 bis” between articles 12 and 13, then the relevant identifies will be “art12a” in both cases. No trailing zeros are ever used. Elements with an explicit numbering mechanism in place (such as member of the hierarchy) will display the number as written in the document (i.e., with no trailing zeros but will all decorations as present), while unnumbered elements will add the number required to make the count correct.

Structures within the <quotedStructure> elements add the relevant mod identifier before their “natural” identifiers. So for instance if clause 3 of article 15 has an amendment that adds article 4/a to a different act, the identifier of the <quotedStructure> element that contains the new article will be “art15-cla03-mod01-art04a”. Of course, automatic systems that create current versions of texts will remove the prefix belonging to the amendment law and will only keep the “art04a” identifier in the final result.

== 7.4Document URIs ==

All resources are identified by a unique name. Resources are categorized as Work, Expression, Manifestation and Item, and each of these categories has a different naming structure. The actual syntax of the resource is specified in the following section, the “AKOMA NTOSO Naming Convention”, which is an integral part of the AKOMA NTOSO standard.

= 8AKOMA NTOSO Naming Convention =

The Akoma Ntoso standard defines a number of referenceable concepts that are used in many situations in the lifecycle of legal documents. The purpose of this section is to provide a standard referencing mechanism to these concepts through the use of URIs associated to classes and instances of an _ad_ _hoc _ontology. The referencing mechanism discussed in this document is meant to be generic and evolving with the evolution of the underlying ontology.

The most important concepts of the Akoma Ntoso ontology are related to documents that have legal status. All discourse and all description of legal sources can be characterized as referring to one of the four levels of a document as introduced by IFLA FRBR (_International Federation of Library Associations (IFLA) - Functional Requirements for Bibliographic Records (FRBR) http://www.ifla.org/VII/s13/frbr/frbr.pdf_):

  * WORK – the abstract concept of the legal resource (e.g., act 3 of 2005).
  * EXPRESSION - any version of the WORK whose content is specified and different from others for any reason: language, versions, etc. (e.g., act 3 of 2005 as in the version following the amendments entered into force on July 3^rd^, 2006).
  * MANIFESTATION - any electronic or physical format of the EXPRESSION: MS Word, Open Office, XML, TIFF, PDF, etc (e.g., PDF representation of act 3 of 2005 as in the version following the amendments entered into force on July 3^rd^, 2006).
  * ITEM – the physical copy of any manifestation in the form of a file stored somewhere in some computer on the net or disconnected (e.g., the file called act32005.pdf on my computer containing a PDF representation of act 3, 2005).

All documents at all levels can be composed of sub-elements, that when combined form the whole document. These are called components, are abstractly represent the notion that several independent _subdocuments_ form the whole document as it appears to the reader (i.e., a main body possibly followed by a number of attachments such as schedules and tables):

  * WorkComponents (e.g., main, schedule, table, etc) - the WorkComponents are abstract entities that can be referenced to refer to different ExpressionComponents in time.
  * ExpressionComponent (e.g., main, schedule, table, etc.) - the ExpressionComponents represent the visible division of the document as generated by the content author (Parliament, etc.)
  * ManifestationComponent (e.g., xml files, PDF files, TIFF images, etc.) - the ManifestationComponents represent the division of the document as generated by the manifestation author (e.g., the XML editor).
  * ItemComponent - the actual files corresponding to the ManifestationComponents

Other concepts dealt by the Akoma Ntoso ontology also derive from the IFLA FRBR ontology, and include but are not limited to individuals (Person), organizations (Corporate Body), actions and occurrences (Event), locations (Place), ideas (Concept) and physical objects (Object). The full list of such concepts is provided in section 8.8.

Scope of the naming convention is to identify in a unique way all Akoma Ntoso concepts and resources on the net and in general all collections thereof. Some principles and characteristics should be respected in the naming convention:

  # _*MEANINGFULNESS*_: the name is a meaningful and logical description of the resource and not of its physical path
  # _*PERMANENCE*_: the name must be permanent and stable over time
  # _*INVARIANCE*_: the name must derive from invariant properties of the resource so as to provide some degree of certainty in obtaining the same name for the same resource regardless of process, tool and person.

FRBR concepts are used differently when taking about documents in a variety of situations. In each cases it is important to use the URI for the correct FRBR level of document. We describe here a few particularly frequent situations:

  # Legislative references will most probably refer to WORKs: acts referring to other acts do so regardless of the actual version, and references must be to something independent of all possible expressions, e.g., to the work.
  # The list of attachments and schedules belong to a specific EXPRESSION, so references to ExpressionComponents is specific of the expression level.
  # Yet the specific Manifestation that is the Akoma Ntoso XML format uses an XML-based syntax to refer to ExpressionComponents, and associate them to the corresponding ManifestationComponents containing the appropriate content. Therefore within XML files the URI of the ManifestationComponents must be used to refer to all components, including the main document, all attachments and all schedules.
  # Multimedia fragments within an XML manifestation (e.g., a drawing, a schema, a map, etc.) do not exist as independent ExpressionComponents, as they are only a part of some ExpressionComponent (even when they are the only part). In fact they are only ManifestationComponents, and as such are referred to in object and img elements with the appropriate ManifestationComponent URI. Even if the same multimedia content appears in different parts of the content of a Manifestation, each instance of that content must correspond to a different ManifestationComponent, and must be considered independently of the other.
  # It is a Item-level decision, once ascertained that the content is exactly identical, to provide space-saving policies by storing only one copy of the multimedia content. This Item-level decision has no impact on references and names, which are still individually different from each other.
  # Non-document concepts are referred to within the metadata and content of Akoma Ntoso documents. References are always performed in two steps: the first step ties the reference point in the document to an item in the Reference section using internal (and not standardized) IDs; the second step ties the item in the reference section to the actual concept through the URI of the concept as specified in this document.

Since the most important concepts in Akoma Ntoso are connected to documents, the main part of this section is devoted to detailing the URIs of document-related concepts, and in particular Works, Expressions, and Manifestations. Items are by definition outside of the scope of this standard, and are only briefly described. The final part of the section provides a URI-based naming mechanism for non-document entities (as well as for document entities when they are handled in a similar way to non-document entities).

== 8.1Absolute and relative URIs ==

Absolute and relative URIs.

At all levels, the Akoma Ntoso URI belong to the http:// scheme and are normally resolved using mechanisms widely available in browsers and web servers.

All http:// URIs are divided into _absolute_ and _relative_ forms. An absolute form of these URIs starts with the string “http://”, which is then followed by an officially registered domain name, and the local part that starts off the first individual “/” character. A relative form of the same URI, on the other hand, has no indication of the scheme, no indication of the domain name, and may have further missing parts at the beginning of the whole string (no missing parts on the end, though). Browsers are able to build the absolute URI corresponding to the relative URI by adding at the beginning of the provided URI the missing parts that are taken from the URI of a base resource. _*In XML manifestations of Akoma Ntoso documents, URIs shall always be expressed in relative forms*_. This makes all URIs independent of the actual resolution mechanism, and allows for very flexible storage, access and reference mechanisms. This means that all resolution mechanisms used to access an Akoma Ntoso document off another Akoma Ntoso document will rely on the same resolution mechanism as the original one, regardless of the resolution mechanism employed to generate the documents themselves.

Another distinction is between _global_ and _local_ URIs. A global URI is a relative URI where all parts are explicit. Thus a global URI _always_ starts with a slash, to indicate that _only_ protocol and domain are omitted, but _all_ other parts are explicitly specified. A local URI, on the other hand, may have one or more parts missing (necessarily from left to right), and the corresponding global (and, subsequently, absolute) URI is determined by adding the corresponding parts taken from the starting document, as usual with relative URI with missing parts.

In XML manifestations of Akoma Ntoso documents, all work, expression and manifestation level references to whole documents must be _global_, and all references to individual components within the same level (or lower levels) must be _local_ and are stored simply as the name of the corresponding component.

Thus, for instance, "/kn/act/2007-01-01/1/schedule1" is the relative, global work-level URI for schedule 1 of act 1/2007 of Kenya, but a work-level reference to schedule 1 placed within the main document of the act will only contain the local URI "schedule1". This guarantees that these references keep on working even after new expressions are created of the same work, both if the part containing the reference is changed or if it remains untouched.

Akoma Ntoso XML elements refers to other documents according to different levels of the FRBR hierarchy. In particular, ref, mref and rref point to work-level and occasionally expression-level URIs only, while object, img and attachment always point to manifestation-level URIs. As the global/local distinction is involved, ref, mref and rref elements always use global URIs for documents different than the host, while object, img and attachment always refer to components of the host document, and thus always use local references.

A reference to a different act is always global:

*as specified in <ref href="/kn/act/2006-08-10/123#sec12">section 12 of act 13/2006</ref>*

while a reference to a specific attachment of the same act is always local:

*as specified in <ref href="schedule01#par12">paragraph 12 of schedule 1 of this act</ref>*

Analogously multimedia fragments (e.g., images) within the main document are specified using a local URI:

*<img src="media/logo.tiff"/>*

The only exception to this rule is for external attachments, i.e., components that are external to the Akoma Ntoso XML package.

In general, all manifestation components are stored within a package, and thus have a URI that is very similar to that of the manifestation itself. Sometimes, though, it could be appropriate to store the individual component elsewhere, as an independent document. Such situation may arise, for instance, when a document specifies another full document as one of its attachments, e.g. a ratification decree placing an international treaty as an attachment, etc. Since it is more appropriate to consider the important document the international treaty, it will constitute a work on its own and have its own URI of a completely different form than the one that the attachment would have.

In these cases, it is more appropriate that all references to the external attachment are global at the work level as well as at the expression and manifestation level. Furthermore, in case we have external attachments, the Attachment and AttachmentOf elements of the References section need to be used. In fact, these two elements are ONLY and ALWAYS to be used for external attachments.

== 8.2Resolving Akoma Ntoso URIs ==

The AKOMA NTOSO naming architecture is built so as not to rely on the existence of a single storage architecture, since the URIs stored within documents are differentiated from the ones physically representing the resource being sought.

The mapping from architecture-independent URIs into accessible architecture-dependent URLs (representing the best ITEM for the document being sought) are realized through specific applications called _URI resolvers_.

The AKOMA NTOSO naming architecture is built so as not to rely on the existence of any individual URI resolver, but assumes that all URIs are always correctly resolved to the best available ITEM regardless of the resolving mechanisms. In fact, each naming authority is given the global task of resolving any possible Akoma Ntoso URIs, regardless of whether it belongs or not to the country or countries managed by the naming authority.

This implies that the authority-specific details of URIs are purposefully omitted in this specification, and need to be considered only when first accessing a document.

For this reason, all URIs in this specification are prefixed with the arbitrary domain name _[http://www.authority.org]_ that stands for any of an arbitrarily large number of equivalent naming authorities.

== 8.3The URI of a Work ==

=== 8.3.1The URI for the Work as a whole ===

The URI of a Work

The URI for the WORK is the baseline for building the URI for the EXPRESSION, which is the baseline for the URI of the MANIFESTATION.

The URI for the WORK consists of the following pieces:

  * The base URL of a naming authority with URI-resolving capabilities _(not relevant for the Naming Convention)_
  * A detail fragment organizing in a hierarchical fashion the additional data:

  * Country (a two-letter code according to ISO 3166-1 alpha-2)
  * Type of document
  * Date (expressed in YYYY-MM-DD format or just YYYY if the year is enough for identification purposes)
  * Number (when appropriate, otherwise the string nn)

All components are separated by forward slashes (“/”) so as to exploit relative URIs in references.

  * _[http://www.authority.org]_*/dz/debaterecord/2004-12-21*[http://www.authority.org/dz/debaterecord/2004-12-21
  ]Algerian parliamentary debate record, 21^st^ December 2004.
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2*[http://www.authority.org/sl/act/2004-02-13/2
  ]Sierra Leone enacted Legislation. Act number 2 of 2004.
  * _[http://www.authority.org]_*/ng/bill/2003-05-14/19*[http://www.authority.org/ng/bill/2003-05-14/19
  ]Namibia Bill number 19 of 2003
  * _[http://www.authority.org]_*/mg/act/2003-03-12/3*[http://www.authority.org/mg/act/2003-03-12/3
  ]Madagascar. Act 3 from 2003

=== 8.3.2The URI for WorkComponents ===

Although components are really belonging to expressions only, it often happens that the legislator makes work-level references to components, which thus need to have work-level URIs as well. Not only, but it may happen (and it has happened in the past several times) that the component (e.g., an attachment) may change name, or position, or even hierarchical placement, time after time.

For instance, we could have that an original act refers to table A of schedule 1, and after a little time schedule 1 is completely abrogated, and thus table A becomes (implicitly) an attachment of the main document. As such, it is important that all references to table A of schedule 1 are considered as references to table A of the main document after that event.

This brings about the necessity to have URIs for Work Components. These are to be used when referring in a work-level fashion to components that have official names and positions, but may change in name and position with time.

One problem is that a work-level component URI has no expression-level part, and yet the component part is AFTER the expression level part. Therefore, it is necessary to make sure that a work-level URI fragment is never mistaken for an expression-level or a component-level URI fragment.

But since:

  # The number part of the work-level URI (/nn/) is required even in unnumbered documents ("/nn/" for _not numbered_).
  # The expression fragment, if present, always has at least the language and the "@" character, and the @ character can only be used for expression fragments,

the absence of a part containing the "@" character indicates a work-level component reference after the 4th component (the number).

  * _[http://www.authority.org]_*/kn/act/2007-01-01/1/schedule1*

Kenya, schedule 1 of act 1 from 2007 (WorkComponent)

== 8.4The URI of an Expression ==

The URI of an Expression

Characterizing the Expression is the specific identification of a content with respect to another content. This includes specifications of the version and the language of the expression. Therefore, different versions of the same work, or the same version of the same work expressed in different languages correspond to different Expressions and will have different URIs.

Expressions are organized in components (the ExpressionComponents), and therefore we need to identify separately the Expression as a whole from the individual URIs for each ExpressionComponent. All of them are all immediately derived from the baseline, which is the URI for the Work.

=== 8.4.1The URI for the expression as a whole ===

The URI for the EXPRESSION as a whole consists of the following pieces:

  * The URI of the corresponding WORK
  * The character “/”
  * The human language code in which the expression is drafted (a three-letter code according to ISO 639-2 alpha-3)
  * The “@” character (required)
  * An optional version identifier:
    * If an approved act, the version date of the expression in syntax YYYY-MM-DD.
    * If a bill, the presentation date is appropriate, or the stage in the approval process that the current draft is the result of.

The absence of the version identifiers signals two different situations depending on the type of document:

  * If the document is not versioned (e.g., the debate record of an assembly) then version identifier need not and cannot be present.
  * If the document is versioned (e.g., an act in force), then the lack of version identifiers refers to the version in force at the moment of the resolution of the URI (i.e., the “current” version of the act, where “current” refers to the moment in time in which the URI is dereferenced, rather than the moment in time in which the document containing the URI was created: _today_ for the reader, as opposed to _today_ for the author of the references).

A particular expression is the first version of a Work. This expression should not be confused with the Work itself (which considers the first Expression in no special way to all other possible Expressions), and it is a very specific, although peculiar, Expression.

The original version of an expression is referred to with an URI with a dangling "@" character (which implies that the actual version date is the first appropriate date for that work).

  * _[http://www.authority.org]_*/dz/debaterecord/2004-12-21/fra*
  Algerian parliamentary debate record, 21st December 2004., French version
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng*
  Sierra Leone enacted Legislation. Act number 2 of 2004. English version, current version (as accessed today [according to the reader])
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@*
  Sierra Leone enacted Legislation. Act number 2 of 2004. English version, original version
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21*
  Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004
  * _[http://www.authority.org]_*/ng/bill/2003-05-14/19/eng@first*
  Namibia Bill number 19 of 2003, first stage, English version
  * _[http://www.authority.org]_*/mg/act/2003-03-12/3/mul*
  Madagascar. Act 3 from 2003 in French and Malagasy.

=== 8.4.2The URIs for ExpressionComponents ===

Some expressions have many components, some are only composed of a main document. In order to explicitly refer to individual components, it is therefore necessary to introduce a naming convention that identifies individual components, and still allows an easy connection between the component and the expression it belongs to.

There are therefore two subcases

==== 8.4.2.1The expression is only composed of one component ====

==== 8.4.2.2The expression is only composed of one component ====

In this case, the URI for the expression as a whole and for its main component are identical plus the name “main”.

==== 8.4.2.3The expression is composed of many components ====

==== 8.4.2.4The expression is composed of many components ====

The URI for each ExpressionComponent consist in this case of the following pieces:

  * The URI of the corresponding EXPRESSION as a whole
  * The character “/”
  * Either

1. A unique name for the attachment

2. The name “main” which is reserved for the main document. It we have different main they are numbered sequentially: main1, main2, etc.

  * _[http://www.authority.org]_*/dz/minutes/2004-12-21/fra/main*
  Algerian parliamentary debate record, 21st December 2004., French version, main document
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng/main*
  Main body of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, current version (as accessed today)
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1*
  Attachment “schedule01” of Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004
  * _[http://www.authority.org]_*/ng/bill/2003-05-14/19/eng@first/main/schedule3*
  Third attachment of Namibia Bill number 19 of 2003, first stage, English version

=== 8.4.3Hierarchies of components in ExpressionComponents ===

A frequent situation occurs when an attachment has itself further attachments. This creates a complex hierarchical situation in which the component should be considered, in a way, as an expression by itself, whose components need to be listed and properly differentiated. The process can be further iterated whenever not only an attachment has further attachments, but its attachments also have further attachments and so on. The situation must also foresee the situation in which attachments at different levels of the hierarchy end up having the same name (e.g., table A in schedule 1 and table A in schedule 2).

In such situations, each ExpressionComponent must be considered as an expression by itself. Recursively, the URI of attachments are as follows:

  * if the attachment does not have further attachments, its URI is provided as detailed in the previous section, without further addenda.
  * If the attachment has further attachments, the URI as detailed in the previous section refers to the whole attachment, including its own attachments.
  * To refer to the main document of an attachment that has further attachments, a further “/main” part should be added.
  * To refer to any further attachment of an attachment, a further “/” followed by a unique name for the attachment must be added to the attachment itself.

  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1*
  Whole attachment “schedule01” of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, English version, as amended on July 2004.
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1/main*
  Main document of the attachment “schedule01” of Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1/tableA*
  Attachment “Table A” of the attachment “schedule01” of Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1/attachment1/main*
  Main document of the attachment “attachment01” of the attachment “schedule01” of Sierra Leone enacted Legislation. Act number 2 of 2004. English version, amended on July 2004

=== 8.4.4The URIs for virtual expressions ===

In some situations the actual enter-in-force date of the expression is not known in advance, and it is necessary to create references or mentions of documents whose URI is now known completely (possibly, because their exact delivery date is not known yet). These are called virtual expressions (i.e., references to expressions that probably do not exist yet or ever, but can be unambiguously deduced once all relevant information are made available).

There are at least three cases where such situation may take place:

  * the information is not known by the author of the expression (e.g., the legislator), in which case the act of actually retrieving the correct information is in itself an act of interpretation;
  * the information is not known by the editor of the expression (e.g., the publisher of the XML version of the document), in which case the information can theoretically be available, but is too much of a burden for the publisher to retrieve it.
  * the information is not know by the query system.

In all these cases, the syntax for the URI of the virtual expression uses a similar syntax to the specification of the actual expression, but the character “:” is used instead of the “@” after the specification of the work URI.

For instance, if we need to reference the expression of an act in force on date “1/1/2007”, we will probably need to refer to some expression whose enter in force date was in a previous date to 1/1/2007.

  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng:2004-07-21*
  Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on the closest date before July 21, 2004

== 8.5The URI of a Manifestation ==

Characterizing the Manifestation is the specific process that generated an electronic document in some specific format(s). This includes specifications of the data format(s) used. Therefore, different manifestations of the same expression generated using different data formats correspond to different manifestations and will have different URIs.

Manifestations are organized in components (the ManifestationComponents), and therefore we must identify separately the Manifestation as a whole and the individual URIs for each ManifestationComponent. All of them are all immediately derived from the baseline, which is the URI for the EXPRESSION.

=== 8.5.1The URI for the manifestation as a whole ===

The URI for the Manifestation as a whole consists of the following pieces:

  * The URI of the corresponding EXPRESSION as a whole
  * The character “.”
  * A unique three letter acronym of the data format in which the manifestation is drafted. The acronym can be “pdf” for PDF, “doc” for MS Word, or “xml” for the XML manifestation.
  * The akn for the package of all documents including XML version of the main document(s) according to the Akoma Ntoso rules.

  * _[http://www.authority.org]_*/dz/debaterecord/2004-12-21/fra/main.doc*
  Word version of the Algerian parliamentary debate record, 21st December 2004., French version
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng/main.pdf*
  PDF version of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, current version (as accessed today)
  * _[http://www.authority.org]_*/sl/act/2004-02-13/2/eng@2004-07-21/main.akn*
  Package of all documents including XML versions of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended in July 2004

=== 8.5.2The URIs for ManifestationComponents ===

Each ManifestationComponent is an independent electronic structure (e.g., a file) in a single data format. Every type of manifestation has of course a different data structure and file structure. Therefore the actual format of the URIs of the components of the manifestation depend on the data format and cannot be formalized in general. In this section we therefore provide a grammar but not an exhaustive list of formats, that depends on the data format chosen for the manifestation.

The URI for each ManifestationComponent consists of the following pieces:

  * The URI of the corresponding EXPRESSION as a whole
  * The character “/”
  * Some unique identification of the ManifestationComponent with respect either to the manifestation as a whole or to the ExpressionComponent the component is the manifestation of.
  * The character “.“
  * A unique extension of the data format in which the manifestation is drafted. The acronym can be “pdf” for PDF, “doc” for MS Word, “xml” for XML documents, “tif” for image formats, etc.

In the next section we will examine the format of the package and the relevant URIs for a specific manifestation of Akoma Ntoso documents, the XML format.

=== 8.5.3The URIs for the components in the Akoma Ntoso package manifestation ===

The Akoma Ntoso package manifestation is a very specific manifestation using a number of data formats (mainly XML but could include other multimedia formats as needed) with a very specific organization of parts and components. Since it makes explicit choices in terms of data formats and reciprocal references, it is important to provide clear and non-ambiguous rules as to the internal naming mechanism and its overall structure.

An Akoma Ntoso package manifestation is a package composed of one or more files organized in a flat fashion. The transportable format is a ZIP file whose extension is “.akn”. Other formats are possible and acceptable as long as they adhere to these rules.

The following are alternative options for the Akoma Ntoso package:

  * If the document is just composed of text and does not refer to any multimedia fragment of any form, then the ZIP package contains a single document called “main.xml”.
  * If the document is composed of many ManifestationComponents but does not refer to any multimedia fragment of any form, then the zip package is composed of many XML files, *one for each ExpressionComponent*. Each ManifestationComponent is then called as its corresponding ExpressionComponent, plus the “.xml” extension. The name “main” is reserved for the main component. Numbers are never used except when they are already part of the ExpressionComponent’s name. * *
  * If the document contains multimedia fragments of any kind, then each individual fragment does not have a corresponding ExpressionComponent, but is just a ManifestationComponent referred to in the img or object element. All multimedia components must be stored within an inner structure (e.g., a folder) called “media”. Multimedia components can be called freely, but must use the appropriate extension to refer to their content type. Thus a logo can be called “logo.tif” or any other name, as long as the extension is correctly specifying the content type.

Reciprocal references to ManifestationComponents are necessary within a specific manifestation. For instance, the manifestation of the main document refers to the manifestations of its attachments via the attachment elements, and the schedule showing an image refers to the file of the image via the img element. In these cases, all references MUST be relative to the package (i.e., the manifestation as a whole):

  * attachment1.xml
  Manifestation of the first attachment of the current document
  * schedule3.xml
  Manifestation of the third attachment of the current document
  * media/logo.tif
  Manifestation of an image within the current document

References to ManifestationComponents are rarely, if ever, needed outside of the manifestation themselves. But if needed, they will refer to the file as follows:

  * The URI of the corresponding EXPRESSION as a whole
  * The character “/”
  * The relative reference to the required ManifestationComponent as specified above.

== 8.6The URI of an Item ==

Akoma Ntoso makes no assumption on the physical storage mechanism employed to record actual manifestations. As such, there is NO rule for URIs of the items, which are free to assume any form whatsoever and correspond to whatever storage mechanism has been employed locally.

On the other hand, the actual URL for the item must be provided to a resolution mechanism in order for the hypertextual feature of the Akoma Ntoso publication systems to work correctly and automatically.

== 8.7The URI of non-document entities ==

The object of all discourses within the Akoma Ntoso framework can be described as a set of abstract classes and their instances and of the relationship among them. Cumulatively, definition of classes, relationships and instances are called an _ontology_.

The four most important classes of the Akoma Ntoso ontology are surely connected to documents, Work, Expression and Manifestation, but many more exist, even if they are not connected directly to physical documents. The purpose of this section is to provide a syntax for non-document entities, i.e., instances of non-document classes, such as people, organizations, concepts, etc. Furthermore, the syntax described here can also be used for document entities as an equivalent syntax to the one specified in the previous sections.

Akoma Ntoso entities are always associated to a class, which provides a structure of properties and relationships to other instances of the same and other classes. Classes in the Akoma Ntoso ontology are organized in a complex maze of sub/superclasses. These are useful to give shape and meaning to a domain, and to provide structure to the overall set of instances of a base class. It is important to notice that sub/superclasses do not form necessarily a tree, but can form a more complex structure, namely a _directed graph_.

For instance, the class of Kenyan judges can be considered a sub class of both Kenyan persons and of persons whose job description is judge. That is, there is a (implicit or explicit) subclass of Judges and a (implicit or explicit) subclasses of Kenyans, both of which are in turn subclasses of Person, and Kenyan Judges is a subclass of both. In fact, we immediately derive the principle that every different value in every different property or relationship implicitly generates a class, that turns into an explicit class only because of our whim or need. For instance, the class of all persons named “Joe” exists implicitly, identifies all persons whose first name is “Joe”, and, if so desired, can be made explicit through the definition of a subclass of Person.

While this is very useful for determining relationships between entities, it affects interestingly the mechanism to associate URIs to such entities. In particular, there being no single hierarchy of classes, it is not appropriate to propose a single path of specifications from the super class to the final class. As such, ideally /person/judge/ken/JoeSmith must point to the same individual as /person/ken/judge/JoeSmith.

In order to maintain meaningfulness, permanence and invariance (which are the main requirements for our naming convention, as specified in the introduction of this document) we need to find a reliable naming mechanism for clearly identifying entities that does not depend on the sub/superclass organization except when strictly necessary.

In particular, we define the concept of _Top Level Classes_ (TLC) that are guaranteed to be a partition of the overall domain of the Akoma Ntoso standard. TLC include Work, Expression, Manifestation, Item, Person, Organization, Concept, Object, Event and Place. The list of TLC may include in future more classes (e.g., Process, Role, Term, and more yet to be determined), as long as they keep on generating a partition (i.e., that they are disjoint and cumulatively describe all possible instance of the Akoma Ntoso domain). Members of the TLC classes can be subclassed at will and with no theoretical constraints.

Given the high number of foreseeable subclasses of the TLC, and the pointlessness of determining a fixed hierarchy in such number, the naming of entities should *not depend* on the presence or absence of a given class except for TLC. This means that it is necessary that each instance of each TLC is provided with an ID string that is guaranteed to be unique within the TLC. The syntax of this ID is dependent of the TLC class, and the syntax for each of the existing TLC is provided in the next section.

Therefore, the URI for non-document entities consists of the following pieces:

  * The base URL of a naming authority with URI-resolving capabilities
  * A detail fragment organizing in a hierarchical fashion the additional data:
    * The string “/ontology”
    * The official name of the appropriate TLC
    * Any number (including none) of slash-separated subclasses of the TLC, as long as they all refer to correct properties of the corresponding instance
    * The ID of the instance, guaranteed to be unique within the TLC.

All components are separated by forward slashes (“/”) so as to exploit relative URIs in references.

  * _[http://www.authority.org]_*/ontology/person/kn.joe.smith.1964-12-22*
  Joe Smith
  * _[http://www.authority.org]_*/ontology/person/kn/kn.joe.smith.1964-12-22*
  Joe Smith (implying that he is a Kenyan)
  * _[http://www.authority.org]_*/ontology/person/kn/judge/kn.joe.smith.1964-12-22*
  Joe Smith (implying that he is a Kenyan who is a judge)
  * _[http://www.authority.org]_*/ontology/person/judge/kn/kn.joe.smith.1964-12-22*
  Joe Smith (implying that he is a judge who is a Kenyan)
  * _[http://www.authority.org]_*/ontology/person/kenyanjudge/kn.joe.smith.1964-12-22*
  Joe Smith (implying that he is a Kenyan judge)

Please note that the classes Work, Expression, Manifestation and Item belong to the ontology as much as the other classes. As such, each Work, Expression and Manifestation can also be indicated with an ontology-based URI that refers to exactly the same entity.

Therefore, the following URIs are equivalent pair-wise, and refer to the same entities:

  * _[http://www.authority.org]_/sl/act/2004-02-13/2
  _[http://www.authority.org]_/ontology/work/sl.act.2004-02-13.2
  * _[http://www.authority.org]_/sl/act/2004-02-13/2/eng@2004-07-21
  _[http://www.authority.org]_/ontology/expression/sl.act.2004-02-13.2.eng@2004-07-21
  * _[http://www.authority.org]_/sl/act/2004-02-13/2/eng@2004-07-21/main/schedule1
  _[http://www.authority.org]_/ontology/expression.component/sl.act.2004-02-13.2.eng@2004-07-21.main.schedule1
  * _[http://www.authority.org]_/sl/act/2004-02-13/2/eng@2004-07-21/main.akn
  _[http://www.authority.org]_/ontology/manifestation/sl.act.2004-02-13.2.eng@2004-07-21.main.akn

== 8.8The IDs for Top Level Classes ==

As mentioned in the previous section, the hierarchy of path elements is of no use for identifying instances of each TLC, given the fact that there can be no unique hierarchy of subclasses in the Akoma Ntoso ontology.

Thus each instance of the ontology needs to be provided with an ID guaranteed to be unique within the TLC it belongs to. The syntax of the ID depends on the actual TLC, and is briefly explained in the following schema.

=== 8.8.1TLC Person ===

A dot-separated string composed of the country of citizenship, the first name, the family name, the birth date in yyyy-mm-dd format, and an optional arbitrary string if ambiguity exists (e.g., if two individuals with the same name and the same birth date exist in the same country).

  * *kn.joe.smith.1964-12-22 *Mr. Joe Smith, the only Kenyan citizen with that name born on December 22nd, 1964

=== 8.8.2TLC Organization ===

A dot-separated string composed of the country of registration (or the string “int” if international, or the string “unreg” if not registered anywhere), a recognizable form of the organization name and an optional arbitrary string if ambiguity exists (e.g., if two organizations with the same name exist in the same country).

  * *kn.parliament *the Kenyan Parliament

=== 8.8.3TLC Concept ===

Concepts differ from terms as they are referring to a specific word or collection of words embodying some concept, rather than to the concept embodied by different words. Therefore, for instance, pope and pontiff are different terms for the same concept, while date is a single term referring to two different concepts (a calendar date as opposed to a type of fruit). Concepts must refer to an specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. No country specifications are necessary for concepts.

  * *wikipedia.Presidential.election *the concept of Presidential Election as defined in Wikipedia

=== 8.8.4TLC Object ===

Objects must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. No country specifications are necessary for objects.

  * *wikipedia.weapon*
  a weapon (as a physical object) as defined in Wikipedia

=== 8.8.5TLC Event ===

Events must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. No country specifications are necessary for events.

  * *wikipedia.world.war.ii*
  The second World War as defined in Wikipedia

=== 8.8.6TLC Place ===

Places must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. No country specifications are necessary for places.

  * *wikipedia.rome*
  The city of Rome as defined in Wikipedia

=== 8.8.7TLC Process ===

Processes must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. Country specifications are necessary for processes since processes with the same name may exist with different steps across different countries.

  * *wikipedia.kn.promulgation*
  The promulgation as defined in Wikipedia and as carried out in Kenya.

=== 8.8.8TLC Role ===

Roles must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. Country specifications are necessary for roles since roles with the same name may exist with different characteristics across different countries.

  * *wikipedia.kn.speaker*
  The role of the speaker of the house as defined in Wikipedia and as conceived in Kenya.

=== 8.8.9TLC Term ===

Terms differ from concepts as they are referring to a specific word or collection of words embodying some concept, rather than to the concept embodied by different words. Therefore, for instance, pope and pontiff are different terms for the same concept, while date is a single terms referring to two different concepts (a calendar date as opposed to a type of fruit). Terms must refer to a specific reference resource that can be used to disambiguate the object being referred to. This must be either a thesaurus, an encyclopedia or a commonly available dictionary. A unique form of the terms specifying the concept joined with dots preceded by an unambiguous name for the resource being used. No country specifications are necessary for places but a language reference is necessary for the correct attribution.

  * *wikipedia.eng.speaker*
  The role of the speaker of the house as defined in Wikipedia and expressed in English.

=== 8.8.10TLC Work ===

The domain-less URI of the Work as specified in this document, with all slash substituted by dots.

  * *sl.act.2004-02-13.2 *Sierra Leone enacted Legislation. Act number 2 of 2004.

=== 8.8.11TLC Expression ===

The domain-less URI of the Expression as specified in this document, with all slash substituted by dots.

  * *sl.act.2004-02-13.2.eng@2004-07-21*
  Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004

=== 8.8.12TLC Expression Component ===

The domain-less URI of the Expression Component as specified in this document, with all slash substituted by dots.

  * *sl.act.2004-02-13.2.eng@2004-07-21.schedule1*
  Attachment “schedule01” of Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended on July 2004

=== 8.8.13TLC Manifestation ===

The domain-less URI of the Manifestation as specified in this document, with all slash substituted by dots.

  * *sl.act.2004-02-13.2.eng@2004-07-21.akn*
  Package of all documents including XML versions of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended in July 2004

=== 8.8.14TLC Manifestation Component ===

The domain-less URI of the Manifestation Component as specified in this document, with all slash substituted by dots.

  * *sl.act.2004-02-13.2.eng@2004-07-21.main.xml*
  The main document (in XML) of the Sierra Leone enacted Legislation. Act number 2 of 2004. English version, as amended in July 2004

=== 8.8.15TLC Item ===

The exact URL of the item as specified in the document, with all slashes substituted by dots.

= 9Differences from previous releases =

== 9.1Differences between release 9/12/2009 and 21/10/2009 ==

This release contains just two minor bug fixes:

  * The complex Type AnyOtherType (allowing elements of any namespace except Akoma Ntoso) now allows any number (including zero) of elements instead of exactly one. This affects a number of metadata elements.
  * Attribute refersTo now expects an URI instead of an IDREF value. This means that references to locations inside the document (e.g., in the references section) now need to be prefixed with character “#” instead of being bare (e.g. refersTo=”foobar” needs to become refersTo=”#foobar”). This is in accordance to a general avoidance of the IDREF introduced on the 23/10/2006 release and for some reasons ignored for the refersTo attribute.

== 9.2Differences between release 21/10/2009 and 11/5/2009 ==

This release contains some differences to previous versions regarding mainly the handling of judgments. Most differences regard metadata to analyze judgments, and only a few of them affect the document content.

  * A new inline element, docketNumber, has been introduced to handle the specification of the docket number, case number, file number or in general any number that represents the overall procedure of which this is one document. The term docketNumber has been chosen because it is clear, unambiguous, not overly restrictive (as would have been caseNumber) and not misunderstandable for a computer-related term (as would have been fileNumber).
  * Speech-related containers such as administrationOfOaths, declarationOfVote, etc. have been added to the list of containers that can be specified anywhere.
  * Element lawyer has a few difference in its attributes: the attribute represents has become for, and a new attribute empoweredBy has been added for lawyers that receive the representation not directly from the client but indirectly through a delegation of power via another lawyer.
  * Element opinion, wrapping the opinion of the judges in a judgment, has a new attribute type that specifies whether each individual judge consents or dissents from the judgment.
  * The element workflow has been clarified. A workflow is not composed of action elements anymore, but of step elements. Each step element defines (references to instances of) a date, an actor (either a TLCPerson or a TLCOrganization), a role (a TLCRole), and an outcome (a TLCConcept).
  * A new analysis container has been added for judicial analysis. The element, judicial, contains a number of judicial arguments, each of which connects a structure of the document to external sources or other structures of the document itself. The judicial element contains one result element that specifies the actual result of the judgment (one of deny, dismiss, uphold, revert, replaceOrder, remit, decide, and approve), and as many elements as needed of the judicial argument category, which are: supports, isAnalogTo, applies, extends, restricts, derogates, contrasts, overrules, dissentsFrom, putsInQuestion, distinguishes. It should be noted that the term putsInQuestion is hardly satisfactory, and different from the proposed questions, which cannot be used in this context because it is already used as a section of the Speech containers.

== 9.3Differences between release 11/5/2009 and 16/3/2009 ==

This release contains no difference from the previous release but a few bug fix. The main justification of this release is to introduce systematic inline documentation to all structures of the language (groups, attribute groups, simple type, complex types and elements.

Additionally, a few bug fixes have been introduced:

  * The internal date of the schema has been updated to reflect correctly the revision date of the schema. In previous release, in fact, the release date within the schema had not been updated, resulting in two very different schemas asserting to have been last updated on the same date.
  * Group ANotherInline has been actually added to the inlineCM group , allowing elements entity and date to be actually used in document markup.
  * Complex types anyOther and anyOtherType, which were identical, have been brought together into one type, anyOtherType. All elements and attributes have been updated accordingly.
  * Several reshuffles of relative position of definitions have been made. No difference in content has been performed, though.

== 9.4Differences between release 16/3/2009 and 5/11/2008 ==

A new section has been added to the Release Notes, section 7.2, describing how to use references and refersTo attributes.

This is a major release, providing a number of relevant modifications to the previous releases. *Many of these modifications are NOT backward-compatible. *These will be explicitly noted as such in the following.

=== 9.4.1Sidenotes and out of line texts ===

A completely new take on side notes has been undertaken in this release. Rather than being header blocks at the beginning of hierarchical structures, side notes are now full members of a new category: authorial notes. An authorial note is by definition a note (i.e., an out-of-line text fragment) that was provided by the original author of the content (i.e., by the author of the specific FRBR expression).

Thus the element sideNote has been removed, and substituted by a new container element, outOfLine, contained in a collection element outOfLines. Each outOfLine has a type attribute assuming either of the value sideNote or publicationNote, an href attribute pointing to a structure in the document to which the out of line text should be attached to, and contains blocks such as p elements.

Thus the fragment

<akomaNtoso xmlns="http://www.akomantoso.org/1.0">

<act>

...

<body>

<section id="sect54.a">

<num>54A</num>

<heading>Conduct of prosecutions.</heading>

<clause id="sect54.a-cla1">

<num>(1)</num>

*<sideNote>Cap 75.</sideNote>*

<content>

<p> Blah blah</p>

</content>

</clause>

</section>

</body>

</act>

</akomaNtoso>

needs to become:

<akomaNtoso xmlns="http://www.akomantoso.org/1.0">

<act>

...

<body>

<section id="sect54.a">

<num>54A</num>

<heading>Conduct of prosecutions.</heading>

<clause *id="sect54.a-cla1"*>

<num>(1)</num>

<content>

<p> Blah blah</p>

</content>

</clause>

</section>

</body>

*<outOfLines>*

*<outOfLine id="out01" type="sideNote" href="#sect54.a-cla1">*

*<p>Cap 75.</p>*

*</outOfLine>*

*</outOfLines>*

</act>

</akomaNtoso>

Please note three issues:

  * Reference direction is reversed than with footnotes: rather than the inline content referring to the note, it is the side note referring to the structural fragment it appears with. This allows to get rid of reference markers within the text, and makes more sense in an abstract sense.
  * Only referable structures can have a side note. This means that side notes are to be considered associated to sections, clauses, etc. and not to the text they contain. If a fragment of text needs to have a side note, it must be wrapped in a referable fragment, such as a ref or a span element.
  * While the previous sideNote element was a block, and thus could contain directly text, the outOfLine element is a container, and thus must contain one or more blocks that in turn contain text.

This modification is *NOT backward-compatible. Elements have been removed and a whole new section created in all types of documents.*

=== 9.4.2Content model reorganization for speeches ===

After being shown an Australian judgement that was really a dialogue between the judge and the lawyers, and considering that AKOMA NTOSO already has all the necessary elements to deal with dialogues, only they were not available in judgements, it was decided that all speech elements should now be available everywhere a container is available. Thus elements such as speech, question and answer are now available even in judgements.

This modification *IS backward-compatible. Content models have been expanded.*

=== 9.4.3New inline elements ===

A number of new inline elements have been added to this release:

  * Element lawyer is used to mark the specification of a lawyer. Attribute represents can be used to refer to the party it represents and the attribute role can be added to provide more detailed information about the kind of lawyer.
  * Element opinion is used to specify the opinion of the individual judge within the coram of a judgement. Use attribute refersTo to point to a TLCConcept that provides computable assessment of the type of opinion held by the judge.
  * Element signature is used to specify the presence of a signature in the document. Use attribute refersTo to point to a TLCPerson that provides the identification of the person responsible of the signature.
  * Element entity is used to wrap any mention to a concept that is worth being mentioned in the references section. This includes persons, organizations, roles, and places, among others. Always use attribute refersTo to point to a Top Level Class element in the references section that provides computable assessment of the concept associated to that element.
  * Element date is used to wrap explicit dates in the document (that are not documentDates). Use attribute date to provide an unambiguous form of the date in XSD 1.0 syntax yyyy-mm-dd. Use attribute refersTo, if appropriate, to point to a TLCEvent that provides computable assessment of the event associated to that date. Please note that a date element was already present in the schema in the identification section of the metadata, and that it has now been renamed FRBRdate (see section 9.1.5).

This modification *IS backward-compatible. Elements have been added.*

=== 9.4.4Judgement-specific and act-specific elements reunited ===

Elements judgementType, judgementTitle and judgementNumber were considered overlapping and redundant with respect to documentType, documentTitle and documentNumber, and thus removed. Judgements should now use these documents. Furthermore, a new section in the Release Notes has been added providing hints at how to use these elements, section 7.2, that specifies that these elements may be present multiple times in the document, but if there are more than one per type, then the attribute refersTo must be present and point to different instances of TLCConcepts.

This modification is *NOT backward-compatible. Elements have been removed.*

=== 9.4.5Name changes in metadata elements ===

Elements within FRBRWork, FRBRExpression , FRBRManifestation, and FRBRItem have now an added FRBR prefix, and thus were turned from this, uri, alias, date, and author to FRBRthis FRBRuri, FRBRalias, FRBRdate, and FRBRauthor.

A new element date was added, and its name clashed with the elements within the FRBR levels. Given the philosophy of giving short names to elements within the content, and longer names to elements within the metadata, it was decided to change the name of the FRBR elements, and of all it neighbors, by introducing the same FRBR prefix for all.

This modification is *NOT backward-compatible. Element names have been changed.*

=== 9.4.6Bug fixes ===

  * A few elements now required presence of two main attributes: id and refersTo. These are *ref and *mod elements, plus elements party, judge and the new element lawyer. Previously both id and refersTo were optional. This modification is *NOT backward-compatible. Attributes have been made required.*
  * Element scene was previously present as both a container and a block. This is an error, and has been fixed. Element scene is now only a container available everywhere a container can be specified. This modification is *NOT backward-compatible, but minor.*

== 9.5Differences between release 5/11/2008 and release 3/3/2008 ==

This release comprises a major modification in naming of elements, introducing a systematic usage of camel case, settling a long-standing issue about incoherence in the usage of lower and uppercase characters in element names (as well as one element group). This change is thus fixing an overall problem of coherence in element naming, rather than a concrete problem of descriptiveness or completeness of the vocabulary.

*Content differences:*

  * The spelling “judgment” has been replaced with “judgement” in observance to the above-mentioned mail by Mariya Badeva. This relates to all elements and attributes containing the word judgement.
  * All Top Level Classes have now a proposed syntax for IDs (that was up to this day only mentioned as TBD).
  * Element comment has been renamed scene according to remarks about adopting a vocabulary more connected to screenplays.
  * Elements ActType, ActTitle, ActNumber, ActProponent, ActDate, and ActPurpose have been renamed docType, docTitle, docNumber, docProponent, docDate, and docPurpose so as to reflect a vocabulary apt to describe more than just legislation.
  * Element recordedTime has now a new attribute type to allow for the specification of recorded times for the beginning of event (startEvent) and end of events (endEvent) if necessary
  * A new inline element remark has been added to specify editorial inclusions within the main text (for instance the caption of the speaker in the new page continuing from the previous one). An attribute type with an initial list of remark types (sceneDescription, phenomenon, caption, translation) is also added.

*Case differences (specific to the camelCase release):*

  * A specific policy for case in names has been decided. It only and specifically regards structure names in the schema (these include names for attributes, elements, simple types, complex types, attribute groups and element groups) that are composed of two separate terms in plain English. The policy is as follows:

  # A name that is composed of a simple term is all in lowercase (e.g., section, act, publication).
  # A name that is composed of two or more full terms has the first one in lowercase, and all the others have their initial letter in uppercase (that I call camelCase, as a reduced form of CamelCase). For instance, courtType, actDate, mainContent.
  # A name that is composed of an acronym plus one or more full terms has the acronym in all capital letters and the remaining terms in camelCase (i.e., the first is all lowercase and the others have the first letter in uppercase). For instance, FRBRManifestation, TLCPerson.

  * The element groups, complex types and simple types EventType, VersionType, InlineCM, SpeechSection, HierarchicalStructure, OpenStructure, DebateStructure, JudgmentStructure and DocumentTypes are now eventType, iversionType, inlineCM, speechSection, hierarchicalStructure, openStructure, debateStructure, judgementStructure (note new spelling for judgement) and documentType (note, also singular now) in camelCase.
  * 17 elements have changed their case in order to adopt the camelCase approach: elements activeModifications, activeRef, akomaNtoso, attachmentOf, debateRecord, efficacyMod, forceMod, hasAttachment, mainContent, meaningMod, noteRef, passiveModifications, passiveRef, proceduralMotions, scopeMod, textualMod, and tocItem.

== 9.6Differences between release 3/3/2008 and 22/10/2007 ==

This is a tentative release of a major evolution, with a specific improvement, namely the support for judgments. Other minor modifications have been included. Existing documents that are not judgments should be unaffected by this release.

Most of the modifications accept and organize the proposal from Monica Palmirani in a document called “Common Open Standard for Judgments”.

Modifications unrelated to the judgment we find:

  * A new element for debate documents called DeclarationofVote
  * A new element this is added in all FRBR levels to report the URI of the specific component where the metadata block is found
  * The name for the Attachment element in the analysis element is now HasAttachment in order to avoid confusions.

Modifications related to the judgment as specified in Palmirani’s document are:

  * A new document type “judgement” is introduced, that has its own schema composed of meta, header, judgmentBody, conclusions and attachment.
  * Within the section header a number of additional inline-level purpose-specific elements have been added, namely: judgmentType, judgmentTitle, judgmentNumber, courtType, neutralCitation, party, judge, and judgmentDate.
  * The judgmentBody has a repeatable choice of sections named introduction, background, motivation, and decision.
  * An additional metadata element, workflow, and its repeatable child action have been added.

Some modifications diverge from Palmirani’s proposal, as follows:

  * No elements such as coram, judges and judgmentDates have been specified, as they are containers, disallowed in the patterned structure of inline elements. The corresponding singular elements are used directly in the flow of the text.
  * The element body has been substituted with judgmentBody, as body has been used already to refer to the content of hierarchical structures such as acts and bills.
  * The href attributes in part, judge and action, meant to refer to the ontological section references, have been omitted as the proper attribute refersTo now exist for all elements in the schema, and therefore no need for such attribute was needed. The as attribute, on the other hand, has been kept as proposed.

Open issues are as follows:

  * We have adopted the spelling “judgment” instead of “judgement” as proposed by Palmirani, but we are worried about the last sentence in the following fragment from http://en.wikipedia.org/wiki/Judgment_%28law%29: “However, the spelling judgement (with e added) largely replaced judgment in the United Kingdom in a non-legal context […] In the context of the law and theology, however, judgment is preferred. In the U.S. judgment strongly prevails. As with many such spelling differences, both forms are equally acceptable in Canada and Australia, although judgment is more common in Canada and judgement in Australia.[1] In New Zealand the form judgment is the preferred spelling in dictionaries, newspapers and legislation, although the variant judgement can also be found in all three categories. In South Africa, judgement is the more common form."
  * We are not convinced of the need for a workflow element, and would have preferred to have it harmonized and included in the lifecycle element.

== 9.7Differences between release 22/10/2007 and 17/09/2007 ==

This is a major release with plenty of differences and improvement. It is worth noting that at least ONE modification (the creation of the content element and the renaming of title and subtitle) is NOT BACKWARD COMPATIBLE, so that documents that were valid against the previous versions most probably will NOT be valid against this version.

Please note the modifications that are not backward compatible are still amenable of automatic conversion. I have added an XSLT stylesheet that takes a valid Akoma Ntoso document of the previous release and converts it into a valid document of the current release. You can find it in the styles directory of the release, called convertToThis.xsl.

This release also includes and documents an unofficial, undocumented release called Tentative Release 20071510 dated 15 October, 2007.

  * Element clauses has been renamed into body. NOT BACKWARD COMPATIBLE
  * Elements title and subtitle are now called heading and subheading, to allow for the presence of the title hierarchical elements. NOT BACKWARD COMPATIBLE
  * The list of hierarchical elements is enriched with the addition of elements title, book, tome, subsection, subpart, subparagraph, subchapter, subtitle, and subclause. As mentioned, elements title and subtitle existed for a different purpose, and are now plain hierarchical elements.
  * A new element content is added to connect the list of hierarchical elements to their actual textual content. Any hierarchical element can contain either other hierarchical elements or the content element which contains blocks. NOT BACKWARD COMPATIBLE
  * The content model of article and clause has completely changed and is now identical to the other hierarchical elements. NOT BACKWARD COMPATIBLE
  * A new optional attribute refersTo has been added to all content elements of the Akoma Ntoso schema. The attribute refersTo can be used when necessary to refer to an element of the references section, in order to suggest an ontological interpretation of the content of the element. Also use refersTo to make an element equivalent and referring to another (e.g. for translation purposes).
  * A new value for the status attribute has been added, “editorial”. The new value is to be added for content that has to appear in the final document with the rest of the text, but was not originally included in the document created by the author. Editorial elements can be used for editorial annotations (e.g.: <span status=”editorial”>(Translation of Afrikaans paragraph follows.)</span>)
  * An initial list of debaterecord subdivisions has been created. Debate records can now be organized with subdivisions that reflect the actual nature of the content. The new elements are: AdministrationOfOath, Communication, Petitions, Papers, NoticesOfMotion, Questions, Address, ProceduralMotions, and PointOfOrder, and can be used in all places where previously only subdivision could be used. TENTATIVE MODIFICATION. DO NOT RELY ON THIS.
  * To avoid confusion between the elements item and Item, the latter has been renamed FRBRItem. For symmetry, all four FRBR levels have similarly changed name. Therefore Work, Expression, Manifestation and Item are now called FRBRork, FRBRExpression, FRBRManifestation and FRBRItem. NOT BACKWARD COMPATIBLE
  * To avoid confusion between the elements force and Force, and efficacy and Efficacy, the latter ones have been renamed ForceMod and EfficacyMod. For symmetry, all other modification elements have similarly changed name. Therefore Textual, Meaning, Scope, Force, Efficacy and LegalSystem are now called TextualMod, MeaningMod, ScopeMod, ForceMod, EfficacyMod and LegalSystemMod. NOT BACKWARD COMPATIBLE
  * The uri element specifies the URI in a value attribute rather than in an href attribute. (Bug fix from previous error) NOT BACKWARD COMPATIBLE
  * The value Suspension for the type attribute of the EfficacyMod (formerly Efficacy) element has been replaced by two values, EntryIntoEfficacy and EndOfEfficacy.
  * All TLC are now present in the reference section. Newly added terms are: TLCConcept, TLCObject, TLCEvent, TLCPlace, TLCProcess, TLCRole, and TLCTerm.
  * Existing TLC elements have been renamed to include the prefix “TLC” to clarify their role. This include the renaming of Person, Organization, Role, and Reference into TLCPerson, TLCOrganization, TLCRole, and TLCReference. NOT BACKWARD COMPATIBLE
  * Element TLCReference (formerly Reference) is now a generic element in all respects, and has a new required name attribute. NOT BACKWARD COMPATIBLE
  * The Work element now contains components just like the other elements of the identification element, such as Expression, Manifestation and Item (Added in Tentative Release 20071510).
  * Within the identification elements, component can now nest and contain other component elements (Added in Tentative Release 20071510).

== 9.8Differences between release 17/09/2007 and 08/06/2007 ==

This is a minor bug-fix release managing better the interaction between Akoma Ntoso elements and elements coming from different vocabularies.

The attribute processContent of the <xsd:any> element is set to lax, so that if proprietary elements are added here and there, users do not have to have the proprietary schema to validate the documents, but just the main Akoma Ntoso one.

A new href attribute is added to a few inner elements of the provisions in the active modifications part of the metadata. This is to prevent the creation of useless proprietary elements to point to the positions in the document that contain the text being referenced.

== 9.9Differences between release 08/06/2007 and 31/05/2007 ==

This is a bug-fix release for managing the expected content model of elements such as mod, mmod, and rmod, which were expected to be mixed content model with a free choice of inline elements and quotes, and due to the odd behavior of complex type derivation through extension in XML Schema 1.0, ended up being a mixed content model with an ordered _sequence_ of a free choice of inline elements and a free choice of quotes, in this order. Similar problem could be found with li elements.

The solution has been to revoke the type of mod, mmod and rmod from being derivations of the inline type, and create a new type modType, which is disconnected from inline but has all the right elements. A similar solution has been taken for li.

Also, for greater precision, the previously defined type modType (which collected modification metadata) has been renamed modificationType in order to prevent further confusion.

== 9.10Differences between release 31/05/2007 and 14/03/2007 ==

None whatsoever in the schema. Release dates of schemas haven’t been changed

Only modifications are in the examples and xslt stylesheets to reflect changes in naming policies in metadata sections.

== 9.11Differences between release 14/03/2007 and 01/02/2007 ==

Small bug fix in the content model of the quotedStructure element that now allows clause elements to be present.

== 9.12Differences between release 01/02/2007 and 23/11/2006 ==

The Naming Convention is introduced and officially raised to standard level. Correspondingly, section 10 of this document has been mostly emptied and now refers to the external document “AKOMA NTOSO Naming Convention”.

The element and attribute synopsis has been completely revised and reorganized.

The schema only received minor modifications covering only the rename of the minutes element into debaterecord, a few bug fixes in attributes, plus the support for differences in force and efficacy periods (*Please note: *an intermediate, non official release dated 30/11/2006 already contains some of these modifications).

  * Two new core optional attributes, startEfficacy and endEfficacy, have been added to all content elements.
  * Elements list, ul, ol, and table now have the full set of core attributes, i.e., id, class, style, title, and enactment attributes.
  * Element ActDate now has a date attribute for normalized dates.
  * A bug in the content model of mod, mmod and rmod has been fixed and now their content model allows plain text to be inserted as well as other types of content.

== 9.13Differences between release 23/11/2006 and 23/10/2006 ==

A minor release covering mostly only the attributes and elements of the metadata section.

  * Elements attachments, clauses, debate and maincontent now have the core set of attributes (they were forgotten in previous versions).
  * Analysis now distinguish between active modifications (stored in amending acts) and passive modifications (stored in amended acts). The old amendments element has been replaced with ActiveModifications and PassiveModifications.
  * Attachment and AttachmentOf have a new attribute, type. No restricted set of values is foreseen yet, but this is bound to change in future release.
  * source and destination elements of all analytical elements can now be repeated. The attribute upTo has also been added to deal with range references for analytical elements.
  * Two new attributes, exclusion and incomplete, are added for modifications that are specified with exceptions and in an incomplete manner.
  * A new textual modification has been added, Renumbering.
  * The elements oldText and newText have been renamed into old and new
  * The element condition has now a new frozen attribute.

== 9.14Differences between release 23/10/2006 and 26/06/2006 ==

Many major modifications have been brought into this release. Metadata are now completely reorganized, introducing the organization in four levels and a section on amendment analysis. Within document, new elements have been added to handle strange hierarchies, line and page numbering, and multiple and range-based modifications and references. In detail:

  * New block elements called list, titled block (tblock) and foreign are added.
  * New inline elements eol and eop for managing end-of-line and end-of-page situations when they are relevant
  * All IDREF attributes are now ANYURI (thus allowing for references to be stored outside of the document). A reference to item foobar used to be idref=”foobar”, needs now to be href=”#foobar”.
  * The attribute numbering has been removed because of doubts of its real usefulness. Can be reinstated if found needed.
  * Two new elements appear close to num and title at the beginning of hierarchical elements, subtitle and sidenote. It’s left to markers to decide when to use either one.
  * The content model of all metadata elements has been simplified removing the attributes for style and enactment that made little sense for them.
  * Element item has completely been reformulated. Its former role as plain member of a hierarchy of subdivision elements within maincontent has been replaced by item list, which _contains _any of a number of item elements. Use list instead of item, and place item within list elements.
  * Elements ref and mod have been enriched with derivative elements mref (multiple references), rref (range of references), mmod (multiple modifications) and rmod (range of modifications) to manage references and modifications that explicitly list in brief multiple different locations of destination document (e.g., “The Provisions of sections 1(1) and (2), 24, 25, 29(2), 30, 31, 43, 55, 56, 57, 58, 60, 61, 62, 63, 67, 80, 84, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 and 115 of law n° 92-10 of 17 september 1992 to lay down the conditions governing the vacancy of and election to the Presidency of the Republic are amended and supplemented” and “The existing sections 34 to 54 of the Principal Act shall be amended by renumbering them as sections 33 to 53 respectively”).
  * New inline elements ins, del and omissis are included for managing explicit newly inserted text, deleted text or omitted text in presentation of norms.
  * All HTML table elements now have required id. HTML li element has now optional value.
  * The section meta has been completely rewritten and has new a completely different structure and philosophy. See section 7 for details on how to use it. The structure splits open the old descriptor section, which now is separated into identification, publication and classification, and introduces the wholly new analysis section.
  * Identification is a new structure that contains information about the URIs relative to the four levels of organization of metadata, Work, Expression, Manifestation and Item. For each of these levels a number of metadata elements are required: author, date, URI, components (except for Work) and preservation.
  * Analysis is a container of provisions about the actual content of the norm. Currently it contains only modification provisions, that are used to classify and manage amendment acts and documents. A total of 6 types of amendments have been added, for a total of 32 subcases, and a collection of 10 parameters to describe them.

== 9.15Differences between release 26/06/2006 and 16/05/2006 ==

Only a few bug fixes:

  * The mod element has been included in the list of inline elements and now can actually be used.
  * The container elements have been added to the content model of the maincontent element and now can be used even outside of quotedStructure.
  * The li element now has a value attribute for specifying the actual display string if different from what automatically computed because of its position.

== 9.16Differences between release 16/05/2006 and 25/04/2006 ==

  * The content model of the debate now has also answers and others and comments.
  * In all elements of the debate the previously existing attribute by, to identify the speaker, is now accompanied by optional attributes as (to identify the role of the speaker) and to (to identify the addressee of the speech).
  * Ids in speeches, questions, answers, and others is now optional instead of required.
  * The li element now allows also paragraphs (p elements)
  * The metadata part is considerably modified: previously one had two separate sections for document references and persons. Now all external references have been unified in a single model, the concept of reference, of which documents, as well as persons, roles and organizations, are possible members. A generic element reference has been added, too. Section 10 of this document reflects the new approach to metadata.
  * All publication elements now have a name attribute to specify the kind of publication we are referring to, and the showAs attribute to specify a presentation mechanism for the publication name.
  * The whole description of naming of resources has been completely rethought and rewritten. This is reflected in section 10 of this document.

== 9.17Differences between release 25/04/2006 and release 15/01/2006 ==

  * All references to PAPI have been removed and substituted with Akoma Ntoso, both in the schema documents and the documentation (in the following forms: akomantoso, AKOMA NTOSO, and AN).
  * After registering the proper domain name, the namespace for Akoma Ntoso documents is now http://www.akomantoso.org/1.0.
  * All references to equivalences, both in the schema documents and documentation, have been removed. Schema is now fully and exclusively in English.

== 9.18Differences between release 15/01/2006 and release 15/11/2005 ==

  * PAPI is now *really *specified as version 1.0 instead of 2.0. Correspondingly, the namespace for this document class is now *really *defined as http://www.parliaments.info/PAPI/1.0.
  * The MISC category of document is now called simply <doc>. <doc> elements are to be used to specify documents that are neither acts (or having an act-like structure) nor debates (or having a debate-like structure). The previously existing document class <doc>, has been completely reorganized and restructured, by modifying the underlying content model, &OpenStructure;. Furthermore, existing document class <report> has been moved into the &OpenStructure; content model from &DebateStructure;.
  * Element <item> has completely changed role and content model, being now a hierarchical element providing support for a hierarchy of items. This is the main structure for hierarchies that are not legislative and thus are contained in generic <doc> elements.
  * Debates (as specified with the <subdivision> element) can now only contain just <speech> and <question> elements, since the <item> element has been reorganized for a different purpose and a different hierarchy.
  * The element <maincontent>, the backbone of the &OpenStructure; content model, has been completely redesigned. Instead of containing just block elements, it can now contain block elements, juridical hierarchical elements, and debate subdivisions and item hierarchies.
  * A new element <subtitle> has been added for hierarchical structures that contain subtitles in addition to number and title.
  * A new attribute has been added, numbering, to elements <maincontent> and <item>, for requesting that elements of a hierarchical structure are numbered by the displaying application, rather than carry their own numbers in the XML source.
  * Element <tocitem>, containing individual items of a table of content, now has an additional required level attribute to specify the hierarchical level of the <tocitem> element.
  * Metadata elements <uri> and <alias>, that in the previous versions had a text content model, now are markers, and have the corresponding value expressed in the value attribute. This definitely and completely aligns all metadata elements to the marker pattern, in order to avoid improper display of their values by unsuspecting XSLT stylesheets.

== 9.19Differences between release 15/11/2005 and release 15/09/2005 ==

  * PAPI is now specified as version 1.0 instead of 2.0 (references to previous attempts at PAPI have been removed). Correspondingly, the namespace for this document class is now defined as http://www.parliaments.info/PAPI/1.0.
  * Two new document classes have been added, <report> and <minutes>, to handle, respectively, _Official Reports_ (or _Hansards_) and _Official Minutes_ (or _Votes and Proceedings_). These two document classes use a new document structure, DebateStructure, that is added to HierarchicalStructure and OpenStructure.
  * Three new special elements have been added to handle the content of reports and minutes: speech, question and item. They are collected in a hierarchical structure of subdivisions, that provide nesting for such elements.
  * A new marker element has been added, recordedTime, to handle the specification, anywhere in the text, of the moment in which the remark, agenda item or question was proposed.
  * A new section of meta elements has been added, persons, to list all the people whose remarks have been recorded in the minutes or reports.
  * Element item, within TOC (Table Of Content), has been renamed tocitem to avoid clashes with debates’ items. Also, element TOC has been converted into lowercase for consistency with other element names.